import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx'
apply from  : "$rootDir/ext.gradle"

buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

//git commit count
def gitVersionCode() {
    int buildID = 753
    return buildID
}

def getFormatVersionCode() {
    def ret = gitVersionCode()
    return String.format("%04d", ret % 10000)
}

//git latest tag
def gitVersionName() {
    String customVersionName = "1.1.0"
    return customVersionName
}

def outputName = getProductName() + "-v${gitVersionName()}" + "_Android.apk"
def outputNameWithBuildId = getProductName() + "-v${gitVersionName() + ".${getFormatVersionCode()}"}" + '_Android.apk'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.vivalnk.sdk.vSDK.demo"
        minSdkVersion 19
        compileSdkVersion 28
        versionCode gitVersionCode()
        versionName gitVersionName()
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        flavorDimensions "SDK-01"
        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            useProguard false
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }

        release {
            initWith(debug)
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            useProguard true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (buildType.getName() == "debug") {
                outputFileName = outputNameWithBuildId
            } else if(buildType.getName() == "release"){
                outputFileName = outputName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {
        //1:200
        //2:310
        //3:330
        All {
            dimension "SDK-01"
            buildConfigField("java.util.Set<Integer>", "APPTYPES", "new java.util.HashSet<Integer>() {{add(1);add(2);add(3);}}")
        }

        V200 {
            dimension "SDK-01"
            buildConfigField("java.util.Set<Integer>", "APPTYPES", "new java.util.HashSet<Integer>() {{add(1);}}")
        }

        V310 {
            dimension "SDK-01"
            buildConfigField("java.util.Set<Integer>", "APPTYPES", "new java.util.HashSet<Integer>() {{add(2);}}")
        }

        V330 {
            dimension "SDK-01"
            buildConfigField("java.util.Set<Integer>", "APPTYPES", "new java.util.HashSet<Integer>() {{add(3);}}")
        }
    }
}

task buildReleaseWithBuildId(type: Copy) {
    dependsOn("assembleAllRelease")
    from("${rootDir.absolutePath}/Demo/build/outputs/apk/All/release/")
    into("${rootDir.absolutePath}/Demo/build/outputs/apk/All/release/")
    rename (outputName, outputNameWithBuildId)
    project.delete("${rootDir.absolutePath}/Demo/build/outputs/apk/All/release/" + outputName)
}

aspectjx {
    enabled false
    exclude 'android.support'
    exclude 'com.squareup'
}

def getProductName() {
    return "SDK-01_Demo"
}


repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url "http://dl.bintray.com/lukaville/maven"
    }
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-snapshots/"
    }
}


apply from: "$rootDir/buildscript/dependencies.gradle"

dependencies {
    //local libaries
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    //local app module
    implementation project(':base')

    //other libraries
    implementation supportLib.multidex

    implementation Libs.PickerView

    debugImplementation Libs.leakcanary_android
    releaseImplementation Libs.leakcanary_android_no_op


    //bugly
    implementation Libs.bugly_crashreport
    implementation Libs.bugly_nativecrashreport

    addSDKDependencies()
    addCommonDependencies()
    addTestDependencies()
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    //implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

}

ext {
    getDemoVersion = this.&gitVersionName
    getDemoVersionCode = this.&getFormatVersionCode
}

//read sign info
File propFile = file('signing.properties')
if (propFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
